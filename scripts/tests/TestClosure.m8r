//
// Up value tests.
//

// Test 1: Simple test of nested functions being able to access parent values, no capture needed
var a = 10;
function f0(a0) {
	var b0 = 2;
	var f1 = function(a1) {
		var b1 = 4;
		var f2 = function(a2) {
			var b2 = 6;
			return a + a0 + b0 + a1 + b1 + a2 + b2;
		};
		return f2(5);
	};
	return f1(3);
}

var g = f0(1);
println("1) Nested function call test (no capture): result (s/b 31): " + g);

// Test 2: Simple test of nested function with closure
function Test2(b) {
	var c = 5;
	return function(e) {
		return b + c + e;
	};
}

var f = Test2(3);
println("2) Simple test nested function with closure (s/b 15): " + f(7));

// Test 3: Test of when Closure is captured
function Test3() {
    var a = 5;
    var b = function() { return a; };
    a = 10;
    return b;
}

var f = Test3();
println("3) Test of when Closure is captured (s/b 10): " + f());

// Test 4: Simple test of capturing passed function
function Test4(func)
{
	println("4) Test of capturing passed function (s/b 20): " + func());
}

var a = 10;
var b = function() { return a; };
a = 20;
Test4(b);

// Test 5: Test from JavaScript
function celebrityID () {
    var celebrityID = 999;
    // We are returning an object with some inner functions​
    // All the inner functions have access to the outer function's variables​
    return {
        getID: function ()  {
            // This inner function will return the UPDATED celebrityID variable​
            // It will return the current value of celebrityID, even after the changeTheID function changes it​
          return celebrityID;
        },
        setID: function (theNewID)  {
            // This inner function will change the outer function's variable anytime​
            celebrityID = theNewID;
        }
    };
}

var mjID = celebrityID ();
println("5) Test from JavaScript: celebrityID (s/b 999): " + mjID.getID());
mjID.setID(567);
println("5) Test from JavaScript: celebrityID (s/b 567): " + mjID.getID());


// Test 5a: m8rscript way of doing test 5
class CelebrityID {
	var _id = 999;
	function getID() { return _id; }
	function setID(newID) { _id = newID; }
}

var mjID = new CelebrityID();
println("5a) Same as (5), but with a class: celebrityID (s/b 999): " + mjID.getID());
mjID.setID(567);
println("5a) Same as (5), but with a class: celebrityID (s/b 567): " + mjID.getID());

// Test 6: Observer pattern test
class Clock
{
	var port = 8080;
	function fetchTime(host) {
		IPAddr.lookupHostname(host, function(name, ip) {
			println("6) Looked up " + name + ", got " + ip + ", port=" + port);
		});
	}
}

var current = new Clock();
current.fetchTime("time.nist.gov");
